@page "/producto"
@page "/producto/{Id:int}"

@inject ICategoriaServicio categoriaServicio
@inject IProductoServicio productoServicio
@inject IToastService toastService
@inject SweetAlertService Swal
@inject NavigationManager navigationManager

@attribute [Authorize(Roles = "Administrador")];

<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="modelo.Nombre">
            </div>
            <ValidationMessage For="@(()=>modelo.Nombre)" />

            <div class="input-group  mt-3">
                <span class="input-group-text bg-light">Descripcion</span>
                <textarea class="form-control" @bind="modelo.Descripcion"></textarea>

            </div>
            <ValidationMessage For="@(()=>modelo.Descripcion)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light" for="inputGroupSelect01">Categoria</label>
                <select class="form-select" value="@modelo.IdCategoria" @onchange="CambiarCategoria">
                    @foreach (var item in listaCategoria)
                    {
                        <option value="@item.IdCategoria">@item.Nombre</option>
                    }
                </select>
            </div>

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                <input type="number" class="form-control" @bind-value="modelo.Precio">
            </div>
            <ValidationMessage For="@(()=>modelo.Precio)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                <input type="number" class="form-control" @bind-value="modelo.Cantidad">
            </div>
            <ValidationMessage For="@(()=>modelo.Cantidad)" />

            <div class="input-group mt-3">
                <label class="input-group-text bg-light">Imagen</label>
                <InputFile type="file" class="form-control" accept="image/png, image/jpg, image/jpeg" OnChange="OnFileChange"></InputFile>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@Boton</button>
                <a href="/productos" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    //para recibir el parametro Id
    [Parameter]
    public int Id { get; set; }

    private string Titulo = "Nuevo Producto";
    private string Boton = "Crear";

    private List<CategoriaDTO> listaCategoria = new List<CategoriaDTO>();
    private ProductoDTO modelo = new ProductoDTO();

    //alcargar componente
    protected override async Task OnInitializedAsync()
    {
        //lista de categorias
        var response = await categoriaServicio.Lista("");

        if (response.Ok)
        {
            listaCategoria = (List<CategoriaDTO>)response.Resultado!;

            //si existen elementos en la lista (existen true sino false)
            if (listaCategoria.Any() && Id == 0)
            {
                //Categoria por defecto
                modelo.IdCategoria = listaCategoria.First().IdCategoria;
            }
        }
    }

    //metodo de recibir los parametros
    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Editar Producto";
            Boton = "Actualizar";

            //utilizando servicio usuario para obtener la informacion de usuario
            var response = await productoServicio.Obtener(Id);

            if (response.Ok!)
            {
                //almacenando la informacion en modelo
                modelo = (ProductoDTO)response.Resultado!;
            }
            else
            {
                toastService.ShowWarning(response.Message);
            }
        }
    }

    //metodo para cambiar el id de la categoria seleccionada
    void CambiarCategoria(ChangeEventArgs e)
    {
        modelo.IdCategoria = Convert.ToInt32(e.Value.ToString());
    }

    //metodo para guardar la imagen
    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        //obtener imagen seleccionada
        FileInfo fileInfo = new FileInfo(e.File.Name);

        //formatos jpg y png
        if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".jpeg") || fileInfo.Extension.ToLower().Contains(".png"))
        {
            var format = $"image/{fileInfo.Extension.Replace(".", "")}";

            //cambiar tamaño de la imagen
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);

            //obtener tamaño del array de bytes
            var buffer = new byte[resizeImage.Size];

            //
            await resizeImage.OpenReadStream().ReadAsync(buffer);

            //crear cadena en base64 a partir del array de bytes
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            //pasamos la cadena al modelo en la propiedad imagen
            modelo.Imagen = imageData;
        }
    }

    //metodo para guardar cambios (crear o editar)
    private async Task GuardarCambios()
    {

        bool ok = true;
        string message = string.Empty;

        if (Id != 0)
        {
            var response = await productoServicio.Editar(modelo);

            if (response.Ok)
            {
                message = "Producto modificado con éxito";
            }
            else
            {
                ok = false;
                message = "No se pudo editar el producto, intenta nuevamente";
            }
        }
        else
        {
            var response = await productoServicio.Crear(modelo);

            if (response.Ok)
            {
                message = "Producto creado con éxito";
            }
            else
            {
                ok = false;
                message = "No se pudo crear el producto, intenta nuevamente";
            }
        }

        if (ok)
        {
            toastService.ShowSuccess(message);
            navigationManager.NavigateTo("/productos");
        }
        else
        {
            toastService.ShowError(message);
        }
    }
}
